// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int                 @id @default(autoincrement())
  username           String
  encrypted_password String
  email              String
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  email_verification email_verification?
  oauth_client       oauth_client[]
  pfp                pfp?
  followers_count    Int                 @default(0)
  followings_count   Int                 @default(0)

  followers follow[] @relation("following")
  following follow[] @relation("follower")

  live_session  live_session[]
  video_session video_session[]

  live_session_allow_list  live_session_allow[]
  video_session_allow_list video_session_allow[]
}

model pfp {
  user_id    Int     @unique
  user       user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  curr       String  @default("/media/images/default/pfp")
  is_default Boolean @default(true)
}

model email_verification {
  email_verified Boolean
  verify_token   String
  created_at     DateTime @default(now())
  expired_at     DateTime
  user_id        Int      @unique
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model oauth_client {
  client_id                  String  @id
  client_name                String  @db.VarChar(20)
  client_secret              String
  client_uri                 String  @db.VarChar(2048)
  contacts                   Json?   @default("[]")
  logo_uri                   String  @db.VarChar(2048)
  tos_uri                    String? @db.VarChar(2048)
  policy_uri                 String? @db.VarChar(2048)
  jwks_uri                   String? @db.VarChar(2048)
  redirect_uri               Json    @default("[]")
  token_endpoint_auth_method String  @default("client_secret_post")
  response_type              String  @default("code")
  grant_types                Json    @default("[\"authorization_code\"]")
  //space-seperated string
  scope                      String
  user_id                    Int
  user                       user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model follow {
  follower          user @relation("follower", fields: [follower_user_id], references: [id], onDelete: Cascade)
  follower_user_id  Int
  following         user @relation("following", fields: [following_user_id], references: [id], onDelete: Cascade)
  following_user_id Int

  @@id([follower_user_id, following_user_id])
}

enum access_level {
  PUBLIC
  FOLLOWER_ONLY
  PRIVATE
}

model live_session {
  id            String              @id
  title         String              @db.VarChar(100)
  description   String?             @db.Text
  thumbnail_uri String
  status        live_session_status
  stream_key    String

  access_level access_level @default(PUBLIC)

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  started_at DateTime?

  organizer_id                Int
  organizer                   user                          @relation(fields: [organizer_id], references: [id], onDelete: Cascade)
  allow                       live_session_allow[]
  break_time                  live_session_break_time?
  live_session_transition_log live_session_transition_log[]

  category_label String
  category       category @relation(fields: [category_label], references: [label])

  @@fulltext([title, description])
}

enum live_session_status {
  READY
  OPENED
  BREAKED
  CLOSED
}

model live_session_transition_log {
  id              Int                 @id @default(autoincrement())
  live_session    live_session        @relation(fields: [live_session_id], references: [id], onDelete: Cascade)
  live_session_id String
  from_state      live_session_status
  to_state        live_session_status
  transitioned_at DateTime            @default(now())
}

model live_session_break_time {
  session_id String @id
  interval   Int
  duration   Int

  live_session live_session? @relation(fields: [session_id], references: [id], onDelete: Cascade)
}

model live_session_allow {
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int
  live_session    live_session @relation(fields: [live_session_id], references: [id], onDelete: Cascade)
  live_session_id String

  @@id([live_session_id, user_id])
}

model video_session {
  id            String  @id
  title         String  @db.VarChar(100)
  description   String? @db.Text
  thumbnail_uri String
  duration      BigInt

  access_level Int @default(1)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  organizer_id Int
  organizer    user                  @relation(fields: [organizer_id], references: [id], onDelete: Cascade)
  allow        video_session_allow[]

  break_time video_session_break_time?

  category_label String
  category       category @relation(fields: [category_label], references: [label])
}

model video_session_allow {
  user             user          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          Int
  video_session    video_session @relation(fields: [video_session_id], references: [id], onDelete: Cascade)
  video_session_id String

  @@id([video_session_id, user_id])
}

model video_session_break_time {
  session_id String @id
  interval   Int
  duration   Int

  video_session video_session? @relation(fields: [session_id], references: [id], onDelete: Cascade)
}

model category {
  label String @id

  live_session  live_session[]
  video_session video_session[]
}
